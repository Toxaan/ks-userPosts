{"version":3,"sources":["Users.js","App.js","serviceWorker.js","index.js"],"names":["Users","props","handleOk","e","setState","visible","handleCancel","state","data","col","title","dataIndex","key","post","fetch","response","json","users","this","alert","id","src","posts","onRow","record","onClick","rowClick","dataSource","columns","rowKey","onOk","onCancel","map","index","className","body","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAkHeA,G,mBA7GX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KA0DVC,SAAW,SAAAC,GACP,EAAKC,SAAS,CACVC,SAAS,KA7DC,EAiElBC,aAAe,SAAAH,GACX,EAAKC,SAAS,CACVC,SAAS,KAjEb,EAAKE,MAAQ,CACTC,KAAK,GACLH,SAAQ,EACRI,IAAI,CACA,CACIC,MAAO,8EACPC,UAAW,KACXC,IAAK,MAET,CACIF,MAAO,qBACPC,UAAW,OACXC,IAAK,QAET,CACIF,MAAO,QACPC,UAAW,QACXC,IAAK,UAGbC,KAAK,CACD,CACIH,MAAM,4HAxBJ,E,4NAgCWI,MAAM,8C,cAAvBC,E,gBACcA,EAASC,O,OAAvBC,E,OACJC,KAAKd,SAAS,CACVI,KAAMS,I,kDAGVE,MAAM,EAAD,I,wLAIEC,G,2FAEPF,KAAKd,SAAS,CACVC,SAAS,IAETgB,EAAM,qDAAqDD,E,SAC1CN,MAAMO,G,cAAvBN,E,gBACcA,EAASC,O,OAAvBM,E,OACJJ,KAAKd,SAAS,CACVS,KAAKS,I,kDAITH,MAAM,EAAD,I,gJAgBH,IAAD,SAIDD,KAAKX,MAFLC,EAFC,EAEDA,KACAC,EAHC,EAGDA,IAEJ,OACI,6BACI,kBAAC,IAAD,CACIc,MAAO,SAACC,GAAD,MAAa,CAChBC,QAAS,WAAO,EAAKC,SAASF,EAAOJ,OAEzCO,WAAYnB,EAAMoB,QAASnB,EAAKoB,OAAO,SAG3C,kBAAC,IAAD,CACInB,MAAM,aACNL,QAASa,KAAKX,MAAMF,QACpByB,KAAMZ,KAAKhB,SACX6B,SAAUb,KAAKZ,cAEdY,KAAKX,MAAMM,KAAKmB,KAAI,SAACnB,EAAKoB,GACvB,OACI,yBAAKrB,IAAKqB,GACN,0BAAMC,UAAU,WAAhB,UACYrB,EAAKH,MACb,6BAFJ,SAGWG,EAAKsB,KACZ,wC,GAnGhBC,IAAMC,YCQXC,MARf,WACE,OACE,yBAAKJ,UAAU,WACb,kBAAC,EAAD,QCKcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cdd8ad29.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Modal, Table } from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\nclass Users extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            data:[],\r\n            visible:false,\r\n            col:[\r\n                {\r\n                    title: 'Id Пользователя',\r\n                    dataIndex: 'id',\r\n                    key: 'id'\r\n                },\r\n                {\r\n                    title: 'Имя',\r\n                    dataIndex: 'name',\r\n                    key: 'name'\r\n                },\r\n                {\r\n                    title: 'email',\r\n                    dataIndex: 'email',\r\n                    key: 'email'\r\n                }\r\n            ],\r\n            post:[ \r\n                {\r\n                    title:\"Пожалуйста подождите...\"\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    async componentDidMount(){\r\n        try {\r\n            let response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n            let users = await response.json();\r\n            this.setState({\r\n                data: users\r\n            })\r\n        } catch(err) {\r\n            alert(err);\r\n        }    \r\n    }\r\n\r\n    async rowClick(id){\r\n        try{\r\n            this.setState({\r\n                visible: true\r\n            })\r\n            let src = 'https://jsonplaceholder.typicode.com/posts?userId='+id;\r\n            let response = await fetch(src);\r\n            let posts = await response.json();\r\n            this.setState({\r\n                post:posts                \r\n            })\r\n\r\n        } catch(err){\r\n            alert(err);\r\n        }\r\n    }\r\n\r\n    handleOk = e => {\r\n        this.setState({\r\n            visible: false\r\n        })\r\n    }\r\n\r\n    handleCancel = e => {\r\n        this.setState({\r\n            visible: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            data,\r\n            col\r\n        } = this.state;\r\n        return(\r\n            <div>\r\n                <Table \r\n                    onRow={(record) => ({\r\n                        onClick: () => {this.rowClick(record.id)}\r\n                    })}\r\n                    dataSource={data} columns={col} rowKey=\"name\"\r\n                >\r\n                </Table>\r\n                <Modal\r\n                    title=\"User posts\"\r\n                    visible={this.state.visible}\r\n                    onOk={this.handleOk}\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    {this.state.post.map((post,index) => {\r\n                        return (\r\n                            <div key={index}>\r\n                                <span className=\"perenos\">\r\n                                    Title: {post.title}\r\n                                    <br/>\r\n                                    Body: {post.body}\r\n                                    <hr/>\r\n                                </span>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Users;\r\n","import React from 'react';\n//import 'antd/dist/antd.css';\nimport Users from './Users';\n\nfunction App() { \n  return (\n    <div className=\"wrapper\">\n      <Users/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}